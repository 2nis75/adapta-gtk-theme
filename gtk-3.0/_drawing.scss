// Drawing mixins

// generic drawing of more complex things

// shadows
//  $z-depth-1: 0 1px 1.5px rgba(0, 0, 0, 0.12), 0 1px 1px rgba(0, 0, 0, 0.24);
$z-depth-1: 0 1px 1px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
$z-depth-2: 0 3px 3px rgba(0, 0, 0, 0.16), 0 3px 3px rgba(0, 0, 0, 0.23);
$z-depth-3: 0 10px 10px rgba(0, 0, 0, 0.19), 0 6px 3px rgba(0, 0, 0, 0.23);
$z-depth-4: 0 14px 14px rgba(0, 0, 0, 0.25), 0 10px 5px rgba(0, 0, 0, 0.22);
$z-depth-5: 0 19px 19px rgba(0, 0, 0, 0.30), 0 15px 6px rgba(0, 0, 0, 0.22);
$header-light: inset 0 1px $highlight_color,
               0 1px 2px rgba(0, 0, 0, 0.06),
               0 2px 3px rgba(0, 0, 0, 0.08);
$header-dark: inset 0 1px $highlight_color,
              0 1px 2px rgba(0, 0, 0, 0.14),
              0 2px 3px rgba(0, 0, 0, 0.18);
$sub-header-light-ltr: inset 0 1px $highlight_color,
                       0 1px 2px rgba(0, 0, 0, 0.06),
                       0 2px 3px rgba(0, 0, 0, 0.08),
                       -5px 0 0 -1px $dark_color,
                       -2px 0 0 -1px $borders_color;
$sub-header-dark-ltr: inset 0 1px $highlight_color,
                      0 1px 2px rgba(0, 0, 0, 0.14),
                      0 2px 3px rgba(0, 0, 0, 0.18),
                      -5px 0 0 -1px $dark_color,
                      -2px 0 0 -1px $borders_color;
$sub-header-light-rtl: inset 0 1px $highlight_color,
                       0 1px 2px rgba(0, 0, 0, 0.06),
                       0 2px 3px rgba(0, 0, 0, 0.08),
                       5px 0 0 -1px $dark_color,
                       2px 0 0 -1px $borders_color;
$sub-header-dark-rtl: inset 0 1px $highlight_color,
                      0 1px 2px rgba(0, 0, 0, 0.14),
                      0 2px 3px rgba(0, 0, 0, 0.18),
                      5px 0 0 -1px $dark_color,
                      2px 0 0 -1px $borders_color;
$sidebar-light-ltr: inset -1px 0 2px rgba(0, 0, 0, 0.04),
                    inset -2px 0 3px rgba(0, 0, 0, 0.04);
$sidebar-light-rtl: inset 1px 0 2px rgba(0, 0, 0, 0.04),
                    inset 2px 0 3px rgba(0, 0, 0, 0.04);
$sidebar-dark-ltr: inset -1px 0 2px rgba(0, 0, 0, 0.06),
                   inset -2px 0 3px rgba(0, 0, 0, 0.08);
$sidebar-dark-rtl: inset 1px 0 2px rgba(0, 0, 0, 0.06),
                   inset 2px 0 3px rgba(0, 0, 0, 0.08);

@keyframes ripple_effect {
  from {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.001,
                                    to(gtkalpha(currentColor, 0.1)),
                                    to(transparent)),
                      linear-gradient(to bottom, gtkalpha(currentColor, 0));
  }
  to {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.4,
                                    to(gtkalpha(currentColor, 0.1)),
                                    to(transparent)),
                      linear-gradient(to bottom, gtkalpha(currentColor, 0.1));
  }
}

@keyframes flat_ripple_effect {
  from {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.001,
                                    to(gtkalpha(currentColor, 0.1)),
                                    to(transparent)),
                      linear-gradient(to bottom, gtkalpha(currentColor, 0.1));
  }
  to {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.4,
                                    to(gtkalpha(currentColor, 0.1)),
                                    to(transparent)),
                      linear-gradient(to bottom, gtkalpha(currentColor, 0.1));
  }
}

@keyframes list_ripple_effect {
  from {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.001,
                                    to(gtkalpha(currentColor, 0)),
                                    to(transparent)),
                      linear-gradient(to bottom, gtkalpha(currentColor, 0.05));
  }
  to {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.4,
                                    to(gtkalpha(currentColor, 0.1)),
                                    to(transparent)),
                      linear-gradient(to bottom, gtkalpha(currentColor, 0.1));
  }
}

// entries

@mixin entry($t, $fc:$selected_bg_color) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
//
// possible $t values:
// normal, focus, insensitive, flat, flat-focus, flat-insensitive;
//

  @if $t==normal {
    border-radius: 0;
    box-shadow: inset 0 -1px $track_color;
    background-color: transparent;
    color: $secondary_fg_color;
  }
  @if $t==focus {
    box-shadow: inset 0 -2px $fc;
    color: $fg_color;
  }
  @if $t==insensitive {
    box-shadow: inset 0 -1px $track_color;
    color: $insensitive_fg_color;
  }
  @if $t==flat {
    border-radius: 0;
    box-shadow: inset 0 -1px $track_color;
    background-color: transparent;
    color: $secondary_fg_color;
  }
  @if $t==flat-focus {
    box-shadow: inset 0 -2px $fc;
    color: $fg_color;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0 cubic-bezier(0.4, 0, 0.2, 1) 0.2s, color 0;
  }
  @if $t==flat-insensitive {
    box-shadow: inset 0 -1px $track_color;
    color: $insensitive_fg_color;
  }
}

// buttons

@mixin button($t, $c:$light_color, $tc:$fg_color) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
//
// possible $t values:
// normal, hover, active, insensitive, checked, checked-insensitive,
// flat, flat-hover, flat-active, flat-insensitive, flat-checked, flat-checked-insensitive, undecorated
//

  @if $t==normal {
  //
  // normal button
  //
    box-shadow: $z-depth-1,
                inset 0 1px $highlight_color;
    background-color: $c;
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.5,
                                    to(gtkalpha(currentColor, 0)),
                                    to(transparent)),
                      linear-gradient(to bottom, gtkalpha(currentColor, 0));
    color: $secondary_fg_color;
  }

  @else if $t==hover {
  //
  // hovered button
  //
    box-shadow: $z-depth-2,
                inset 0 1px $highlight_color;
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.5,
                                    to(gtkalpha(currentColor, 0)),
                                    to(transparent)),
                      linear-gradient(to bottom, gtkalpha(currentColor, 0));
    color: $fg_color;
  }

  @else if $t==active {
  //
  // pushed button
  //
    box-shadow: $z-depth-2,
                inset 0 1px $highlight_color;
    color: $fg_color;
    transition-duration: 0;
    animation: ripple_effect 0.2s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  @else if $t==insensitive {
  //
  // insensitive button
  //
    box-shadow: none;
    background-color: $track_color;
    color: if($tc!=$fg_color, $insensitive_fg_color, $insensitive_secondary_fg_color);
    > .label { color: inherit; }
  }
  @else if $t==checked {
  //
  // checked button
  //
    box-shadow: $z-depth-1,
                inset 0 1px $highlight_color;
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }
  @else if $t==checked-insensitive {
  //
  // checked insensitive button
  //
    box-shadow: none;
    background-color: $track_color;
    color: gtkopacity($selected_bg_color, 0.4);
    > .label { color: inherit; }
  }

  @else if $t==flat {
  //
  // normal flat button
  //
    box-shadow: none;
    background-color: transparent;
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.5,
                                    to(gtkalpha(currentColor, 0)),
                                    to(transparent)),
                      linear-gradient(to bottom, gtkalpha(currentColor, 0));
  }
  @else if $t==flat-hover {
  //
  // hovered flat button
  //
    box-shadow: none;
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.5,
                                    to(gtkalpha(currentColor, 0)),
                                    to(transparent)),
                      linear-gradient(to bottom, gtkalpha(currentColor, 0.1));
  }
  @else if $t==flat-active {
  //
  // pushed flat button
  //
    box-shadow: none;
    animation: flat_ripple_effect 0.2s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  @else if $t==flat-insensitive {
  //
  // insensitive flat button
  //
    box-shadow: none;
    background-color: transparent;
  }
  @else if $t==flat-checked {
  //
  // checked flat button
  //
    background-color: $track_color;
    color: $fg_color;
  }
  @else if $t==flat-checked-insensitive {
  //
  // checked flat insensitive button
  //
    > .label { color: inherit; }
  }

  @else if $t==undecorated {
  //
  // reset
  //
    border-color: transparent;
    background-color: transparent;
    background-image: none;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
}

@mixin overshoot($p, $t:normal, $c:$secondary_selected_bg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_position: center $p;

  @if ($p == left) or ($p == right) {
    $_position: $p center;
  }

  background-image: -gtk-gradient(radial,
                                  $_position, 0,
                                  $_position, 0.75,
                                  to(gtkopacity($c, 0.2)),
                                  to(transparent));

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}

@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_undershoot_color_dark: gtkopacity(black, 0.2);
  $_undershoot_color_light: gtkopacity(white, 0.2);

  $_gradient_dir: left;
  $_dash_bg_size: 16px 2px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: center $p;

  background-color: transparent; // shouldn't be needed, but better to be sure;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 2px 16px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p center;
  }

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
                                    $_undershoot_color_light 50%,
                                    $_undershoot_color_dark 50%);

  padding-#{$p}: 0;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
}

